#+TITLE: Reliable UDP (Part 2)
#+SUBTITLE: Fall 2020
#+OPTIONS: toc:nil num:nil html-postamble:nil author:nil date:nil
#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \lstset{basicstyle=\small\ttfamily,columns=flexible,breaklines=true}
#+LATEX_HEADER: \usepackage[a4paper,margin=1.0in]{geometry}
#+LATEX_HEADER: \setlength{\parindent}{0cm}
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \setitemize{noitemsep,topsep=2pt,parsep=2pt,partopsep=2pt}
#+LATEX_HEADER: \usepackage{titling}
#+LATEX_HEADER: \setlength{\droptitle}{-1in}
#+LATEX_HEADER: \posttitle{\par\end{center}\vspace{-.5in}}

This is part 2 of 2. Part 1 is [[./README.org][here]].

** Semantics of /netster/ with --file
When running either the client or the server with the =-f <filepath>= option, the behavior should be as follows:

  - *Server*: Wait for a connection from a remote client, accept incoming packets as-per the selected rudp level and write payloads to the file in =<filepath>=.  When the last packet is recieved, close the server.
  - *Client*: Read data from =<filepath>= until complete, send a packet indicating the file is complete, then close the client.

Both server and client should be terminated at the completion of a single file transfer.

** New /netster/ options for Tasks 2 and 3
The netster rudp option (=-r=) selects the RUDP operation, for both client and server.  When the /netster/ client and server programs are started using this flag, application data should be sent and received using your new RUDP implementations.

The =-r= flag accepts a value.  In Part 1, we used =-r 1= and =-r 0=. If =-r 1= is passed, that means we should use the alternating bit protocol (Task 2).  In Part 2 we will implement =-r 2=, which means we should use the go-back-N protocol instead (Task 3).  Your program should check the value of =r= at execution time and call the appropriate methods for each implementation.

** Task 3 - Implement go-back-N protocol
As we have learned, stop-and-wait will be horribly slow when transferring any significant amount of data, especially as latency in the network increases.  With a working Task 2 implementation, you should be able to observe this slow behavior on the lossy network emulator.

For go-back-N, you will need at a minimum:

 - An allocated buffer that stores your client's window of data.  This may be a fixed-size buffer with reasonable limits (e.g. 128 "slots").
 - The ability to buffer and send data while keeping track of which "slots" have been acknowledged by the receiver.
 - A timer that indicates when it is time to /go-back-N/ and retransmit.

** Task 4 (538/599 sections) - Add simple congestion control
You must implement a congestion control "window" that begins small and grows as data is successfully acknowledged. Your strategy for acknowledgements (including negative acknowledgement) is up to you.

The goal is to prevent the go-back-N protocol from blasting the network with a full window of data at once, but start slow and then "probe" the network to determine how large the window may grow to avoid loss.

NOTE: Unless you are feeling ambitious, the threading additions from the previous assignment can be removed for all tasks related to RUDP. Especially to start, a single threaded RUDP implementation will be much easier to reason about.

** TO SUBMIT
- Write well-documented and well-formatted code in your /a3/ and /netster/ files for Task 3.
- Graduate students also add code for Task 4.
- Commit and push your changes to your Net-Fall20 github.iu.edu repository.
- Submit to Canvas a URL for your repository containing a commit hash. To find this url, go to your Net-Fall20 repository's /commits/ endpoint, and choose one specific commit for your teachers to grade.

  # https://gist.github.com/dergachev/4627207#gistcomment-1407037
  [[./images/out.gif]]

Your URL should look similar to this:

: https://github.iu.edu/username/Net-Fall20/commit/00a3e8fc1e0f2bad388a9f138be1e909eef25eb4

Replace =username= with your username, and replace =00a3e8fc1e0f2bad388a9f138be1e909eef25eb4= with the commit hash of your chosen commit.

You can find this same commit hash by running the command =git log= from your terminal, after changing directory to your repository folder.
